#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace HomeManagementSystem2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="fcgl")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void Insertaddress(address instance);
    partial void Updateaddress(address instance);
    partial void Deleteaddress(address instance);
    partial void Insertsetting(setting instance);
    partial void Updatesetting(setting instance);
    partial void Deletesetting(setting instance);
    partial void Insertagent(agent instance);
    partial void Updateagent(agent instance);
    partial void Deleteagent(agent instance);
    partial void Insertdelegate(@delegate instance);
    partial void Updatedelegate(@delegate instance);
    partial void Deletedelegate(@delegate instance);
    partial void Inserthouse(house instance);
    partial void Updatehouse(house instance);
    partial void Deletehouse(house instance);
    partial void Insertmember(member instance);
    partial void Updatemember(member instance);
    partial void Deletemember(member instance);
    partial void Insertperson(person instance);
    partial void Updateperson(person instance);
    partial void Deleteperson(person instance);
    partial void Insertphoto(photo instance);
    partial void Updatephoto(photo instance);
    partial void Deletephoto(photo instance);
    partial void Insertrenthouse(renthouse instance);
    partial void Updaterenthouse(renthouse instance);
    partial void Deleterenthouse(renthouse instance);
    partial void Insertsalehouse(salehouse instance);
    partial void Updatesalehouse(salehouse instance);
    partial void Deletesalehouse(salehouse instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["fcglConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<address> address
		{
			get
			{
				return this.GetTable<address>();
			}
		}
		
		public System.Data.Linq.Table<setting> setting
		{
			get
			{
				return this.GetTable<setting>();
			}
		}
		
		public System.Data.Linq.Table<agent> agent
		{
			get
			{
				return this.GetTable<agent>();
			}
		}
		
		public System.Data.Linq.Table<@delegate> @delegate
		{
			get
			{
				return this.GetTable<@delegate>();
			}
		}
		
		public System.Data.Linq.Table<house> house
		{
			get
			{
				return this.GetTable<house>();
			}
		}
		
		public System.Data.Linq.Table<manage> manage
		{
			get
			{
				return this.GetTable<manage>();
			}
		}
		
		public System.Data.Linq.Table<member> member
		{
			get
			{
				return this.GetTable<member>();
			}
		}
		
		public System.Data.Linq.Table<person> person
		{
			get
			{
				return this.GetTable<person>();
			}
		}
		
		public System.Data.Linq.Table<photo> photo
		{
			get
			{
				return this.GetTable<photo>();
			}
		}
		
		public System.Data.Linq.Table<renthouse> renthouse
		{
			get
			{
				return this.GetTable<renthouse>();
			}
		}
		
		public System.Data.Linq.Table<salehouse> salehouse
		{
			get
			{
				return this.GetTable<salehouse>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.address")]
	public partial class address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _address_id;
		
		private string _city;
		
		private string _area;
		
		private string _street;
		
		private string _community;
		
		private EntitySet<house> _house;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onaddress_idChanging(int value);
    partial void Onaddress_idChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnareaChanging(string value);
    partial void OnareaChanged();
    partial void OnstreetChanging(string value);
    partial void OnstreetChanged();
    partial void OncommunityChanging(string value);
    partial void OncommunityChanged();
    #endregion
		
		public address()
		{
			this._house = new EntitySet<house>(new Action<house>(this.attach_house), new Action<house>(this.detach_house));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int address_id
		{
			get
			{
				return this._address_id;
			}
			set
			{
				if ((this._address_id != value))
				{
					this.Onaddress_idChanging(value);
					this.SendPropertyChanging();
					this._address_id = value;
					this.SendPropertyChanged("address_id");
					this.Onaddress_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(50)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_area", DbType="VarChar(50)")]
		public string area
		{
			get
			{
				return this._area;
			}
			set
			{
				if ((this._area != value))
				{
					this.OnareaChanging(value);
					this.SendPropertyChanging();
					this._area = value;
					this.SendPropertyChanged("area");
					this.OnareaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_street", DbType="VarChar(50)")]
		public string street
		{
			get
			{
				return this._street;
			}
			set
			{
				if ((this._street != value))
				{
					this.OnstreetChanging(value);
					this.SendPropertyChanging();
					this._street = value;
					this.SendPropertyChanged("street");
					this.OnstreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_community", DbType="VarChar(50)")]
		public string community
		{
			get
			{
				return this._community;
			}
			set
			{
				if ((this._community != value))
				{
					this.OncommunityChanging(value);
					this.SendPropertyChanging();
					this._community = value;
					this.SendPropertyChanged("community");
					this.OncommunityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="address_house", Storage="_house", ThisKey="address_id", OtherKey="address")]
		public EntitySet<house> house
		{
			get
			{
				return this._house;
			}
			set
			{
				this._house.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_house(house entity)
		{
			this.SendPropertyChanging();
			entity.address1 = this;
		}
		
		private void detach_house(house entity)
		{
			this.SendPropertyChanging();
			entity.address1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.setting")]
	public partial class setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _renthouse;
		
		private string _rentsetting;
		
		private EntityRef<renthouse> _renthouse1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrenthouseChanging(int value);
    partial void OnrenthouseChanged();
    partial void OnrentsettingChanging(string value);
    partial void OnrentsettingChanged();
    #endregion
		
		public setting()
		{
			this._renthouse1 = default(EntityRef<renthouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_renthouse", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int renthouse
		{
			get
			{
				return this._renthouse;
			}
			set
			{
				if ((this._renthouse != value))
				{
					if (this._renthouse1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrenthouseChanging(value);
					this.SendPropertyChanging();
					this._renthouse = value;
					this.SendPropertyChanged("renthouse");
					this.OnrenthouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rentsetting", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string rentsetting
		{
			get
			{
				return this._rentsetting;
			}
			set
			{
				if ((this._rentsetting != value))
				{
					this.OnrentsettingChanging(value);
					this.SendPropertyChanging();
					this._rentsetting = value;
					this.SendPropertyChanged("rentsetting");
					this.OnrentsettingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="renthouse_setting", Storage="_renthouse1", ThisKey="renthouse", OtherKey="house_id", IsForeignKey=true)]
		public renthouse renthouse1
		{
			get
			{
				return this._renthouse1.Entity;
			}
			set
			{
				renthouse previousValue = this._renthouse1.Entity;
				if (((previousValue != value) 
							|| (this._renthouse1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._renthouse1.Entity = null;
						previousValue.setting.Remove(this);
					}
					this._renthouse1.Entity = value;
					if ((value != null))
					{
						value.setting.Add(this);
						this._renthouse = value.house_id;
					}
					else
					{
						this._renthouse = default(int);
					}
					this.SendPropertyChanged("renthouse1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.agent")]
	public partial class agent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _person_id;
		
		private string _profession;
		
		private System.Nullable<System.DateTime> _register_date;
		
		private System.Nullable<System.DateTime> _valid_date;
		
		private System.Nullable<int> _trade_number;
		
		private EntitySet<@delegate> _delegate;
		
		private EntityRef<person> _person;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onperson_idChanging(int value);
    partial void Onperson_idChanged();
    partial void OnprofessionChanging(string value);
    partial void OnprofessionChanged();
    partial void Onregister_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onregister_dateChanged();
    partial void Onvalid_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onvalid_dateChanged();
    partial void Ontrade_numberChanging(System.Nullable<int> value);
    partial void Ontrade_numberChanged();
    #endregion
		
		public agent()
		{
			this._delegate = new EntitySet<@delegate>(new Action<@delegate>(this.attach_delegate), new Action<@delegate>(this.detach_delegate));
			this._person = default(EntityRef<person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_person_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int person_id
		{
			get
			{
				return this._person_id;
			}
			set
			{
				if ((this._person_id != value))
				{
					if (this._person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onperson_idChanging(value);
					this.SendPropertyChanging();
					this._person_id = value;
					this.SendPropertyChanged("person_id");
					this.Onperson_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profession", DbType="VarChar(30)")]
		public string profession
		{
			get
			{
				return this._profession;
			}
			set
			{
				if ((this._profession != value))
				{
					this.OnprofessionChanging(value);
					this.SendPropertyChanging();
					this._profession = value;
					this.SendPropertyChanged("profession");
					this.OnprofessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_register_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> register_date
		{
			get
			{
				return this._register_date;
			}
			set
			{
				if ((this._register_date != value))
				{
					this.Onregister_dateChanging(value);
					this.SendPropertyChanging();
					this._register_date = value;
					this.SendPropertyChanged("register_date");
					this.Onregister_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_valid_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> valid_date
		{
			get
			{
				return this._valid_date;
			}
			set
			{
				if ((this._valid_date != value))
				{
					this.Onvalid_dateChanging(value);
					this.SendPropertyChanging();
					this._valid_date = value;
					this.SendPropertyChanged("valid_date");
					this.Onvalid_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trade_number", DbType="Int")]
		public System.Nullable<int> trade_number
		{
			get
			{
				return this._trade_number;
			}
			set
			{
				if ((this._trade_number != value))
				{
					this.Ontrade_numberChanging(value);
					this.SendPropertyChanging();
					this._trade_number = value;
					this.SendPropertyChanged("trade_number");
					this.Ontrade_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="agent_delegate", Storage="_delegate", ThisKey="person_id", OtherKey="agent")]
		public EntitySet<@delegate> @delegate
		{
			get
			{
				return this._delegate;
			}
			set
			{
				this._delegate.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="person_agent", Storage="_person", ThisKey="person_id", OtherKey="person_id", IsForeignKey=true)]
		public person person
		{
			get
			{
				return this._person.Entity;
			}
			set
			{
				person previousValue = this._person.Entity;
				if (((previousValue != value) 
							|| (this._person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._person.Entity = null;
						previousValue.agent = null;
					}
					this._person.Entity = value;
					if ((value != null))
					{
						value.agent = this;
						this._person_id = value.person_id;
					}
					else
					{
						this._person_id = default(int);
					}
					this.SendPropertyChanged("person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_delegate(@delegate entity)
		{
			this.SendPropertyChanging();
			entity.agent1 = this;
		}
		
		private void detach_delegate(@delegate entity)
		{
			this.SendPropertyChanging();
			entity.agent1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.delegate")]
	public partial class @delegate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _member;
		
		private int _agent;
		
		private int _house;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _messages;
		
		private string _state;
		
		private EntityRef<agent> _agent1;
		
		private EntityRef<house> _house1;
		
		private EntityRef<member> _member1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmemberChanging(int value);
    partial void OnmemberChanged();
    partial void OnagentChanging(int value);
    partial void OnagentChanged();
    partial void OnhouseChanging(int value);
    partial void OnhouseChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnmessagesChanging(string value);
    partial void OnmessagesChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    #endregion
		
		public @delegate()
		{
			this._agent1 = default(EntityRef<agent>);
			this._house1 = default(EntityRef<house>);
			this._member1 = default(EntityRef<member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_member", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int member
		{
			get
			{
				return this._member;
			}
			set
			{
				if ((this._member != value))
				{
					if (this._member1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemberChanging(value);
					this.SendPropertyChanging();
					this._member = value;
					this.SendPropertyChanged("member");
					this.OnmemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_agent", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int agent
		{
			get
			{
				return this._agent;
			}
			set
			{
				if ((this._agent != value))
				{
					if (this._agent1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnagentChanging(value);
					this.SendPropertyChanging();
					this._agent = value;
					this.SendPropertyChanged("agent");
					this.OnagentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_house", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int house
		{
			get
			{
				return this._house;
			}
			set
			{
				if ((this._house != value))
				{
					if (this._house1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhouseChanging(value);
					this.SendPropertyChanging();
					this._house = value;
					this.SendPropertyChanged("house");
					this.OnhouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_messages", DbType="VarChar(140)")]
		public string messages
		{
			get
			{
				return this._messages;
			}
			set
			{
				if ((this._messages != value))
				{
					this.OnmessagesChanging(value);
					this.SendPropertyChanging();
					this._messages = value;
					this.SendPropertyChanged("messages");
					this.OnmessagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="VarChar(10)")]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="agent_delegate", Storage="_agent1", ThisKey="agent", OtherKey="person_id", IsForeignKey=true)]
		public agent agent1
		{
			get
			{
				return this._agent1.Entity;
			}
			set
			{
				agent previousValue = this._agent1.Entity;
				if (((previousValue != value) 
							|| (this._agent1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._agent1.Entity = null;
						previousValue.@delegate.Remove(this);
					}
					this._agent1.Entity = value;
					if ((value != null))
					{
						value.@delegate.Add(this);
						this._agent = value.person_id;
					}
					else
					{
						this._agent = default(int);
					}
					this.SendPropertyChanged("agent1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="house_delegate", Storage="_house1", ThisKey="house", OtherKey="house_id", IsForeignKey=true)]
		public house house1
		{
			get
			{
				return this._house1.Entity;
			}
			set
			{
				house previousValue = this._house1.Entity;
				if (((previousValue != value) 
							|| (this._house1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._house1.Entity = null;
						previousValue.@delegate.Remove(this);
					}
					this._house1.Entity = value;
					if ((value != null))
					{
						value.@delegate.Add(this);
						this._house = value.house_id;
					}
					else
					{
						this._house = default(int);
					}
					this.SendPropertyChanged("house1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_delegate", Storage="_member1", ThisKey="member", OtherKey="person_id", IsForeignKey=true)]
		public member member1
		{
			get
			{
				return this._member1.Entity;
			}
			set
			{
				member previousValue = this._member1.Entity;
				if (((previousValue != value) 
							|| (this._member1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member1.Entity = null;
						previousValue.@delegate.Remove(this);
					}
					this._member1.Entity = value;
					if ((value != null))
					{
						value.@delegate.Add(this);
						this._member = value.person_id;
					}
					else
					{
						this._member = default(int);
					}
					this.SendPropertyChanged("member1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.house")]
	public partial class house : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _house_id;
		
		private string _levels;
		
		private System.Nullable<int> _area;
		
		private string _orientation;
		
		private string _types;
		
		private string _decoration;
		
		private System.Data.Linq.Binary _thumbnails;
		
		private System.Nullable<byte> _room;
		
		private System.Nullable<byte> _hall;
		
		private System.Nullable<byte> _toilet;
		
		private System.Nullable<int> _address;
		
		private System.Nullable<int> _member;
		
		private string _title;
		
		private EntitySet<@delegate> _delegate;
		
		private EntitySet<photo> _photo;
		
		private EntityRef<renthouse> _renthouse;
		
		private EntityRef<salehouse> _salehouse;
		
		private EntityRef<address> _address1;
		
		private EntityRef<member> _member1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onhouse_idChanging(int value);
    partial void Onhouse_idChanged();
    partial void OnlevelsChanging(string value);
    partial void OnlevelsChanged();
    partial void OnareaChanging(System.Nullable<int> value);
    partial void OnareaChanged();
    partial void OnorientationChanging(string value);
    partial void OnorientationChanged();
    partial void OntypesChanging(string value);
    partial void OntypesChanged();
    partial void OndecorationChanging(string value);
    partial void OndecorationChanged();
    partial void OnthumbnailsChanging(System.Data.Linq.Binary value);
    partial void OnthumbnailsChanged();
    partial void OnroomChanging(System.Nullable<byte> value);
    partial void OnroomChanged();
    partial void OnhallChanging(System.Nullable<byte> value);
    partial void OnhallChanged();
    partial void OntoiletChanging(System.Nullable<byte> value);
    partial void OntoiletChanged();
    partial void OnaddressChanging(System.Nullable<int> value);
    partial void OnaddressChanged();
    partial void OnmemberChanging(System.Nullable<int> value);
    partial void OnmemberChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public house()
		{
			this._delegate = new EntitySet<@delegate>(new Action<@delegate>(this.attach_delegate), new Action<@delegate>(this.detach_delegate));
			this._photo = new EntitySet<photo>(new Action<photo>(this.attach_photo), new Action<photo>(this.detach_photo));
			this._renthouse = default(EntityRef<renthouse>);
			this._salehouse = default(EntityRef<salehouse>);
			this._address1 = default(EntityRef<address>);
			this._member1 = default(EntityRef<member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_house_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int house_id
		{
			get
			{
				return this._house_id;
			}
			set
			{
				if ((this._house_id != value))
				{
					this.Onhouse_idChanging(value);
					this.SendPropertyChanging();
					this._house_id = value;
					this.SendPropertyChanged("house_id");
					this.Onhouse_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_levels", DbType="VarChar(10)")]
		public string levels
		{
			get
			{
				return this._levels;
			}
			set
			{
				if ((this._levels != value))
				{
					this.OnlevelsChanging(value);
					this.SendPropertyChanging();
					this._levels = value;
					this.SendPropertyChanged("levels");
					this.OnlevelsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_area", DbType="Int")]
		public System.Nullable<int> area
		{
			get
			{
				return this._area;
			}
			set
			{
				if ((this._area != value))
				{
					this.OnareaChanging(value);
					this.SendPropertyChanging();
					this._area = value;
					this.SendPropertyChanged("area");
					this.OnareaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orientation", DbType="VarChar(10)")]
		public string orientation
		{
			get
			{
				return this._orientation;
			}
			set
			{
				if ((this._orientation != value))
				{
					this.OnorientationChanging(value);
					this.SendPropertyChanging();
					this._orientation = value;
					this.SendPropertyChanged("orientation");
					this.OnorientationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_types", DbType="VarChar(15)")]
		public string types
		{
			get
			{
				return this._types;
			}
			set
			{
				if ((this._types != value))
				{
					this.OntypesChanging(value);
					this.SendPropertyChanging();
					this._types = value;
					this.SendPropertyChanged("types");
					this.OntypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_decoration", DbType="VarChar(15)")]
		public string decoration
		{
			get
			{
				return this._decoration;
			}
			set
			{
				if ((this._decoration != value))
				{
					this.OndecorationChanging(value);
					this.SendPropertyChanging();
					this._decoration = value;
					this.SendPropertyChanged("decoration");
					this.OndecorationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thumbnails", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary thumbnails
		{
			get
			{
				return this._thumbnails;
			}
			set
			{
				if ((this._thumbnails != value))
				{
					this.OnthumbnailsChanging(value);
					this.SendPropertyChanging();
					this._thumbnails = value;
					this.SendPropertyChanged("thumbnails");
					this.OnthumbnailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_room", DbType="TinyInt")]
		public System.Nullable<byte> room
		{
			get
			{
				return this._room;
			}
			set
			{
				if ((this._room != value))
				{
					this.OnroomChanging(value);
					this.SendPropertyChanging();
					this._room = value;
					this.SendPropertyChanged("room");
					this.OnroomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hall", DbType="TinyInt")]
		public System.Nullable<byte> hall
		{
			get
			{
				return this._hall;
			}
			set
			{
				if ((this._hall != value))
				{
					this.OnhallChanging(value);
					this.SendPropertyChanging();
					this._hall = value;
					this.SendPropertyChanged("hall");
					this.OnhallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toilet", DbType="TinyInt")]
		public System.Nullable<byte> toilet
		{
			get
			{
				return this._toilet;
			}
			set
			{
				if ((this._toilet != value))
				{
					this.OntoiletChanging(value);
					this.SendPropertyChanging();
					this._toilet = value;
					this.SendPropertyChanged("toilet");
					this.OntoiletChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="Int")]
		public System.Nullable<int> address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					if (this._address1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_member", DbType="Int")]
		public System.Nullable<int> member
		{
			get
			{
				return this._member;
			}
			set
			{
				if ((this._member != value))
				{
					if (this._member1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmemberChanging(value);
					this.SendPropertyChanging();
					this._member = value;
					this.SendPropertyChanged("member");
					this.OnmemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="house_delegate", Storage="_delegate", ThisKey="house_id", OtherKey="house")]
		public EntitySet<@delegate> @delegate
		{
			get
			{
				return this._delegate;
			}
			set
			{
				this._delegate.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="house_photo", Storage="_photo", ThisKey="house_id", OtherKey="house")]
		public EntitySet<photo> photo
		{
			get
			{
				return this._photo;
			}
			set
			{
				this._photo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="house_renthouse", Storage="_renthouse", ThisKey="house_id", OtherKey="house_id", IsUnique=true, IsForeignKey=false)]
		public renthouse renthouse
		{
			get
			{
				return this._renthouse.Entity;
			}
			set
			{
				renthouse previousValue = this._renthouse.Entity;
				if (((previousValue != value) 
							|| (this._renthouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._renthouse.Entity = null;
						previousValue.house = null;
					}
					this._renthouse.Entity = value;
					if ((value != null))
					{
						value.house = this;
					}
					this.SendPropertyChanged("renthouse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="house_salehouse", Storage="_salehouse", ThisKey="house_id", OtherKey="house_id", IsUnique=true, IsForeignKey=false)]
		public salehouse salehouse
		{
			get
			{
				return this._salehouse.Entity;
			}
			set
			{
				salehouse previousValue = this._salehouse.Entity;
				if (((previousValue != value) 
							|| (this._salehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._salehouse.Entity = null;
						previousValue.house = null;
					}
					this._salehouse.Entity = value;
					if ((value != null))
					{
						value.house = this;
					}
					this.SendPropertyChanged("salehouse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="address_house", Storage="_address1", ThisKey="address", OtherKey="address_id", IsForeignKey=true)]
		public address address1
		{
			get
			{
				return this._address1.Entity;
			}
			set
			{
				address previousValue = this._address1.Entity;
				if (((previousValue != value) 
							|| (this._address1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._address1.Entity = null;
						previousValue.house.Remove(this);
					}
					this._address1.Entity = value;
					if ((value != null))
					{
						value.house.Add(this);
						this._address = value.address_id;
					}
					else
					{
						this._address = default(Nullable<int>);
					}
					this.SendPropertyChanged("address1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_house", Storage="_member1", ThisKey="member", OtherKey="person_id", IsForeignKey=true)]
		public member member1
		{
			get
			{
				return this._member1.Entity;
			}
			set
			{
				member previousValue = this._member1.Entity;
				if (((previousValue != value) 
							|| (this._member1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member1.Entity = null;
						previousValue.house.Remove(this);
					}
					this._member1.Entity = value;
					if ((value != null))
					{
						value.house.Add(this);
						this._member = value.person_id;
					}
					else
					{
						this._member = default(Nullable<int>);
					}
					this.SendPropertyChanged("member1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_delegate(@delegate entity)
		{
			this.SendPropertyChanging();
			entity.house1 = this;
		}
		
		private void detach_delegate(@delegate entity)
		{
			this.SendPropertyChanging();
			entity.house1 = null;
		}
		
		private void attach_photo(photo entity)
		{
			this.SendPropertyChanging();
			entity.house1 = this;
		}
		
		private void detach_photo(photo entity)
		{
			this.SendPropertyChanging();
			entity.house1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.manage")]
	public partial class manage
	{
		
		private System.Nullable<int> _house;
		
		private System.Nullable<int> _agent;
		
		private System.Nullable<System.DateTime> _date;
		
		public manage()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_house", DbType="Int")]
		public System.Nullable<int> house
		{
			get
			{
				return this._house;
			}
			set
			{
				if ((this._house != value))
				{
					this._house = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_agent", DbType="Int")]
		public System.Nullable<int> agent
		{
			get
			{
				return this._agent;
			}
			set
			{
				if ((this._agent != value))
				{
					this._agent = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this._date = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.member")]
	public partial class member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _person_id;
		
		private string _identity_number;
		
		private EntitySet<@delegate> _delegate;
		
		private EntitySet<house> _house;
		
		private EntityRef<person> _person;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onperson_idChanging(int value);
    partial void Onperson_idChanged();
    partial void Onidentity_numberChanging(string value);
    partial void Onidentity_numberChanged();
    #endregion
		
		public member()
		{
			this._delegate = new EntitySet<@delegate>(new Action<@delegate>(this.attach_delegate), new Action<@delegate>(this.detach_delegate));
			this._house = new EntitySet<house>(new Action<house>(this.attach_house), new Action<house>(this.detach_house));
			this._person = default(EntityRef<person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_person_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int person_id
		{
			get
			{
				return this._person_id;
			}
			set
			{
				if ((this._person_id != value))
				{
					if (this._person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onperson_idChanging(value);
					this.SendPropertyChanging();
					this._person_id = value;
					this.SendPropertyChanged("person_id");
					this.Onperson_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_identity_number", DbType="VarChar(20)")]
		public string identity_number
		{
			get
			{
				return this._identity_number;
			}
			set
			{
				if ((this._identity_number != value))
				{
					this.Onidentity_numberChanging(value);
					this.SendPropertyChanging();
					this._identity_number = value;
					this.SendPropertyChanged("identity_number");
					this.Onidentity_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_delegate", Storage="_delegate", ThisKey="person_id", OtherKey="member")]
		public EntitySet<@delegate> @delegate
		{
			get
			{
				return this._delegate;
			}
			set
			{
				this._delegate.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_house", Storage="_house", ThisKey="person_id", OtherKey="member")]
		public EntitySet<house> house
		{
			get
			{
				return this._house;
			}
			set
			{
				this._house.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="person_member", Storage="_person", ThisKey="person_id", OtherKey="person_id", IsForeignKey=true)]
		public person person
		{
			get
			{
				return this._person.Entity;
			}
			set
			{
				person previousValue = this._person.Entity;
				if (((previousValue != value) 
							|| (this._person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._person.Entity = null;
						previousValue.member = null;
					}
					this._person.Entity = value;
					if ((value != null))
					{
						value.member = this;
						this._person_id = value.person_id;
					}
					else
					{
						this._person_id = default(int);
					}
					this.SendPropertyChanged("person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_delegate(@delegate entity)
		{
			this.SendPropertyChanging();
			entity.member1 = this;
		}
		
		private void detach_delegate(@delegate entity)
		{
			this.SendPropertyChanging();
			entity.member1 = null;
		}
		
		private void attach_house(house entity)
		{
			this.SendPropertyChanging();
			entity.member1 = this;
		}
		
		private void detach_house(house entity)
		{
			this.SendPropertyChanging();
			entity.member1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.person")]
	public partial class person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _person_id;
		
		private string _password;
		
		private string _email;
		
		private string _names;
		
		private string _phone;
		
		private System.Data.Linq.Binary _photo;
		
		private EntityRef<agent> _agent;
		
		private EntityRef<member> _member;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onperson_idChanging(int value);
    partial void Onperson_idChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnnamesChanging(string value);
    partial void OnnamesChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnphotoChanging(System.Data.Linq.Binary value);
    partial void OnphotoChanged();
    #endregion
		
		public person()
		{
			this._agent = default(EntityRef<agent>);
			this._member = default(EntityRef<member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_person_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int person_id
		{
			get
			{
				return this._person_id;
			}
			set
			{
				if ((this._person_id != value))
				{
					this.Onperson_idChanging(value);
					this.SendPropertyChanging();
					this._person_id = value;
					this.SendPropertyChanged("person_id");
					this.Onperson_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(20)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(20)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_names", DbType="VarChar(30)")]
		public string names
		{
			get
			{
				return this._names;
			}
			set
			{
				if ((this._names != value))
				{
					this.OnnamesChanging(value);
					this.SendPropertyChanging();
					this._names = value;
					this.SendPropertyChanged("names");
					this.OnnamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(20)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary photo
		{
			get
			{
				return this._photo;
			}
			set
			{
				if ((this._photo != value))
				{
					this.OnphotoChanging(value);
					this.SendPropertyChanging();
					this._photo = value;
					this.SendPropertyChanged("photo");
					this.OnphotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="person_agent", Storage="_agent", ThisKey="person_id", OtherKey="person_id", IsUnique=true, IsForeignKey=false)]
		public agent agent
		{
			get
			{
				return this._agent.Entity;
			}
			set
			{
				agent previousValue = this._agent.Entity;
				if (((previousValue != value) 
							|| (this._agent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._agent.Entity = null;
						previousValue.person = null;
					}
					this._agent.Entity = value;
					if ((value != null))
					{
						value.person = this;
					}
					this.SendPropertyChanged("agent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="person_member", Storage="_member", ThisKey="person_id", OtherKey="person_id", IsUnique=true, IsForeignKey=false)]
		public member member
		{
			get
			{
				return this._member.Entity;
			}
			set
			{
				member previousValue = this._member.Entity;
				if (((previousValue != value) 
							|| (this._member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member.Entity = null;
						previousValue.person = null;
					}
					this._member.Entity = value;
					if ((value != null))
					{
						value.person = this;
					}
					this.SendPropertyChanged("member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.photo")]
	public partial class photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _house;
		
		private string _picture;
		
		private EntityRef<house> _house1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnhouseChanging(int value);
    partial void OnhouseChanged();
    partial void OnpictureChanging(string value);
    partial void OnpictureChanged();
    #endregion
		
		public photo()
		{
			this._house1 = default(EntityRef<house>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_house", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int house
		{
			get
			{
				return this._house;
			}
			set
			{
				if ((this._house != value))
				{
					if (this._house1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhouseChanging(value);
					this.SendPropertyChanging();
					this._house = value;
					this.SendPropertyChanged("house");
					this.OnhouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_picture", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string picture
		{
			get
			{
				return this._picture;
			}
			set
			{
				if ((this._picture != value))
				{
					this.OnpictureChanging(value);
					this.SendPropertyChanging();
					this._picture = value;
					this.SendPropertyChanged("picture");
					this.OnpictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="house_photo", Storage="_house1", ThisKey="house", OtherKey="house_id", IsForeignKey=true)]
		public house house1
		{
			get
			{
				return this._house1.Entity;
			}
			set
			{
				house previousValue = this._house1.Entity;
				if (((previousValue != value) 
							|| (this._house1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._house1.Entity = null;
						previousValue.photo.Remove(this);
					}
					this._house1.Entity = value;
					if ((value != null))
					{
						value.photo.Add(this);
						this._house = value.house_id;
					}
					else
					{
						this._house = default(int);
					}
					this.SendPropertyChanged("house1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.renthouse")]
	public partial class renthouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _house_id;
		
		private string _types;
		
		private System.Nullable<int> _payment;
		
		private string _description;
		
		private EntitySet<setting> _setting;
		
		private EntityRef<house> _house;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onhouse_idChanging(int value);
    partial void Onhouse_idChanged();
    partial void OntypesChanging(string value);
    partial void OntypesChanged();
    partial void OnpaymentChanging(System.Nullable<int> value);
    partial void OnpaymentChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public renthouse()
		{
			this._setting = new EntitySet<setting>(new Action<setting>(this.attach_setting), new Action<setting>(this.detach_setting));
			this._house = default(EntityRef<house>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_house_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int house_id
		{
			get
			{
				return this._house_id;
			}
			set
			{
				if ((this._house_id != value))
				{
					if (this._house.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onhouse_idChanging(value);
					this.SendPropertyChanging();
					this._house_id = value;
					this.SendPropertyChanged("house_id");
					this.Onhouse_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_types", DbType="VarChar(10)")]
		public string types
		{
			get
			{
				return this._types;
			}
			set
			{
				if ((this._types != value))
				{
					this.OntypesChanging(value);
					this.SendPropertyChanging();
					this._types = value;
					this.SendPropertyChanged("types");
					this.OntypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payment", DbType="Int")]
		public System.Nullable<int> payment
		{
			get
			{
				return this._payment;
			}
			set
			{
				if ((this._payment != value))
				{
					this.OnpaymentChanging(value);
					this.SendPropertyChanging();
					this._payment = value;
					this.SendPropertyChanged("payment");
					this.OnpaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="renthouse_setting", Storage="_setting", ThisKey="house_id", OtherKey="renthouse")]
		public EntitySet<setting> setting
		{
			get
			{
				return this._setting;
			}
			set
			{
				this._setting.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="house_renthouse", Storage="_house", ThisKey="house_id", OtherKey="house_id", IsForeignKey=true)]
		public house house
		{
			get
			{
				return this._house.Entity;
			}
			set
			{
				house previousValue = this._house.Entity;
				if (((previousValue != value) 
							|| (this._house.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._house.Entity = null;
						previousValue.renthouse = null;
					}
					this._house.Entity = value;
					if ((value != null))
					{
						value.renthouse = this;
						this._house_id = value.house_id;
					}
					else
					{
						this._house_id = default(int);
					}
					this.SendPropertyChanged("house");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_setting(setting entity)
		{
			this.SendPropertyChanging();
			entity.renthouse1 = this;
		}
		
		private void detach_setting(setting entity)
		{
			this.SendPropertyChanging();
			entity.renthouse1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.salehouse")]
	public partial class salehouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _house_id;
		
		private string _types;
		
		private System.Nullable<int> _price;
		
		private string _developer;
		
		private System.Nullable<int> _number;
		
		private System.Nullable<int> _property_costs;
		
		private System.Nullable<System.DateTime> _build_date;
		
		private string _description;
		
		private EntityRef<house> _house;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onhouse_idChanging(int value);
    partial void Onhouse_idChanged();
    partial void OntypesChanging(string value);
    partial void OntypesChanged();
    partial void OnpriceChanging(System.Nullable<int> value);
    partial void OnpriceChanged();
    partial void OndeveloperChanging(string value);
    partial void OndeveloperChanged();
    partial void OnnumberChanging(System.Nullable<int> value);
    partial void OnnumberChanged();
    partial void Onproperty_costsChanging(System.Nullable<int> value);
    partial void Onproperty_costsChanged();
    partial void Onbuild_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onbuild_dateChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public salehouse()
		{
			this._house = default(EntityRef<house>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_house_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int house_id
		{
			get
			{
				return this._house_id;
			}
			set
			{
				if ((this._house_id != value))
				{
					if (this._house.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onhouse_idChanging(value);
					this.SendPropertyChanging();
					this._house_id = value;
					this.SendPropertyChanged("house_id");
					this.Onhouse_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_types", DbType="VarChar(15)")]
		public string types
		{
			get
			{
				return this._types;
			}
			set
			{
				if ((this._types != value))
				{
					this.OntypesChanging(value);
					this.SendPropertyChanging();
					this._types = value;
					this.SendPropertyChanged("types");
					this.OntypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int")]
		public System.Nullable<int> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_developer", DbType="VarChar(100)")]
		public string developer
		{
			get
			{
				return this._developer;
			}
			set
			{
				if ((this._developer != value))
				{
					this.OndeveloperChanging(value);
					this.SendPropertyChanging();
					this._developer = value;
					this.SendPropertyChanged("developer");
					this.OndeveloperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int")]
		public System.Nullable<int> number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_property_costs", DbType="Int")]
		public System.Nullable<int> property_costs
		{
			get
			{
				return this._property_costs;
			}
			set
			{
				if ((this._property_costs != value))
				{
					this.Onproperty_costsChanging(value);
					this.SendPropertyChanging();
					this._property_costs = value;
					this.SendPropertyChanged("property_costs");
					this.Onproperty_costsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_build_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> build_date
		{
			get
			{
				return this._build_date;
			}
			set
			{
				if ((this._build_date != value))
				{
					this.Onbuild_dateChanging(value);
					this.SendPropertyChanging();
					this._build_date = value;
					this.SendPropertyChanged("build_date");
					this.Onbuild_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="house_salehouse", Storage="_house", ThisKey="house_id", OtherKey="house_id", IsForeignKey=true)]
		public house house
		{
			get
			{
				return this._house.Entity;
			}
			set
			{
				house previousValue = this._house.Entity;
				if (((previousValue != value) 
							|| (this._house.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._house.Entity = null;
						previousValue.salehouse = null;
					}
					this._house.Entity = value;
					if ((value != null))
					{
						value.salehouse = this;
						this._house_id = value.house_id;
					}
					else
					{
						this._house_id = default(int);
					}
					this.SendPropertyChanged("house");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
